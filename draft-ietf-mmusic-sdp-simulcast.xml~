<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="std" docName="draft-ietf-mmusic-sdp-simulcast-02"
     ipr="trust200902" submissionType="IETF">
  <front>
    <title abbrev="Simulcast">Using Simulcast in SDP and RTP Sessions</title>

    <author fullname="Bo Burman" initials="B." surname="Burman">
      <organization>Ericsson</organization>

      <address>
        <postal>
          <street>Kistavagen 25</street>

          <city>SE-164 80 Stockholm</city>

          <region/>

          <code/>

          <country>Sweden</country>
        </postal>

        <phone/>

        <facsimile/>

        <email>bo.burman@ericsson.com</email>

        <uri/>
      </address>
    </author>

    <author fullname="Magnus Westerlund" initials="M." surname="Westerlund">
      <organization>Ericsson</organization>

      <address>
        <postal>
          <street>Farogatan 2</street>

          <city>SE-164 80 Stockholm</city>

          <country>Sweden</country>
        </postal>

        <phone>+46 10 714 82 87</phone>

        <email>magnus.westerlund@ericsson.com</email>
      </address>
    </author>

    <author fullname="Suhas Nandakumar" initials="S." surname="Nandakumar">
      <organization>Cisco</organization>

      <address>
        <postal>
          <street>170 West Tasman Drive</street>

          <city>San Jose</city>

          <region>CA</region>

          <code>95134</code>

          <country>USA</country>
        </postal>

        <phone/>

        <facsimile/>

        <email>snandaku@cisco.com</email>

        <uri/>
      </address>
    </author>

    <author fullname="Mo Zanaty" initials="M." surname="Zanaty">
      <organization>Cisco</organization>

      <address>
        <postal>
          <street>170 West Tasman Drive</street>

          <city>San Jose</city>

          <region>CA</region>

          <code>95134</code>

          <country>USA</country>
        </postal>

        <phone/>

        <facsimile/>

        <email>mzanaty@cisco.com</email>

        <uri/>
      </address>
    </author>

    <date day="6" month="October" year="2015"/>

    <abstract>
      <t>In some application scenarios it may be desirable to send multiple
      differently encoded versions of the same media source in different RTP
      streams. This is called simulcast. This document discusses the best way
      of accomplishing simulcast in RTP and how to signal it in SDP. A
      solution is defined by making an extension to SDP, and using RTP/RTCP
      identification methods to relate RTP streams belonging to the same media
      source. The SDP extension consists of a new media level SDP attribute
      that expresses capability to send and/or receive simulcast RTP streams.
      RTP/RTCP identification using either payload types or a separately
      defined method for RTP stream configuration are defined.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="sec-intro" title="Introduction">
      <t>Most of today's multiparty video conference solutions make use of
      centralized servers to reduce the bandwidth and CPU consumption in the
      endpoints. Those servers receive RTP streams from each participant and
      send some suitable set of possibly modified RTP streams to the rest of
      the participants, which usually have heterogeneous capabilities (screen
      size, CPU, bandwidth, codec, etc). One of the biggest issues is how to
      perform RTP stream adaptation to different participants' constraints
      with the minimum possible impact on both video quality and server
      performance.</t>

      <t>Simulcast is defined in this memo as the act of simultaneously
      sending multiple different encoded streams of the same media source,
      e.g. the same video source encoded with different video encoder types or
      image resolutions. This can be done in several ways and for different
      purposes. This document focuses on the case where it is desirable to
      provide a media source as multiple encoded streams over <xref
      target="RFC3550">RTP</xref> towards an intermediary so that the
      intermediary can provide the wanted functionality by selecting which RTP
      stream to forward to other participants in the session, and more
      specifically how the identification and grouping of the involved RTP
      streams are done. From an RTP perspective, simulcast is a specific
      application of the aspects discussed in <xref
      target="I-D.ietf-avtcore-multiplex-guidelines">RTP Multiplexing
      Guidelines</xref>.</t>

      <t>This document describes a few scenarios where it is motivated to use
      simulcast, and also defines the needed SDP signaling for it.</t>
    </section>

    <section anchor="sec-definitions" title="Definitions">
      <t/>

      <section title="Terminology">
        <t>This document makes use of the terminology defined in <xref
        target="I-D.ietf-avtext-rtp-grouping-taxonomy">RTP Taxonomy</xref>,
        <xref target="RFC5117">RTP Topology</xref> and <xref
        target="I-D.ietf-avtcore-rtp-topologies-update">RTP Topologies
        Update</xref>. In addition, the following terms are used:<list
            style="hanging">
            <t hangText="RTP Mixer:">An RTP middle node, defined in <xref
            target="RFC5117"/> (Section 3.4: Topo-Mixer), further elaborated
            and extended with other topologies in <xref
            target="I-D.ietf-avtcore-rtp-topologies-update"/> (Section 3.6 to
            3.9).</t>

            <t hangText="RTP Switch:">A common short term for the terms
            "switching RTP mixer", "source projecting middlebox", and "video
            switching MCU" as discussed in <xref
            target="I-D.ietf-avtcore-rtp-topologies-update"/>.</t>

            <t hangText="Simulcast Stream:">One Encoded Stream or Dependent
            Stream from a set of concurrently transmitted Encoded Streams and
            optional Dependent Streams, all sharing a common Media Source, as
            defined in <xref target="I-D.ietf-avtext-rtp-grouping-taxonomy"/>.
            Decoding a Dependent Stream also requires the related (Dependent
            and) Encoded Stream(s), but in the context of simulcast that is
            considered a property of the Dependent Stream constituting the
            simulcast stream. For example, HD and thumbnail video simulcast
            versions of a single Media Source sent concurrently as separate
            RTP Streams.</t>

            <t hangText="Simulcast Format:">Different formats of a simulcast
            stream serve the same purpose as alternative RTP payload types in
            non-simulcast SDP, to allow multiple alternative media formats for
            a given RTP Stream. As for multiple RTP payload types on the
            m-line, any one of the alternative formats can be used at a given
            point in time, but not more than one (based on RTP timestamp), and
            what format is used can change dynamically from one RTP packet to
            another. For example, if all participants in a group video call
            can decode H.264 and H.265 video, but only some can encode H.265,
            both H.264 and H.265 can be kept as alternative formats, and the
            format may dynamically switch between H.264 and H.265 as different
            participants become active speaker.</t>
          </list></t>
      </section>

      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
        target="RFC2119">RFC 2119</xref>.</t>
      </section>
    </section>

    <section anchor="sec-use-cases" title="Use Cases">
      <t>Many use cases of simulcast as described in this document relate to a
      multi-party communication session where one or more central nodes are
      used to adapt the view of the communication session towards individual
      participants, and facilitate the media transport between participants.
      Thus, these cases targets the RTP Mixer type of topology.</t>

      <t>There are two principle approaches for an RTP Mixer to provide this
      adapted view of the communication session to each receiving
      participant:<list style="symbols">
          <t>Transcoding (decoding and re-encoding) received RTP streams with
          characteristics adapted to each receiving participant. This often
          include mixing or composition of media sources from multiple
          participants into a mixed media source originated by the RTP Mixer.
          The main advantage of this approach is that it achieves close to
          optimal adaptation to individual receiving participants. The main
          disadvantages are that it can be very computationally expensive to
          the RTP Mixer and typically also degrades media Quality of
          Experience (QoE) such as end-to-end delay for the receiving
          participants.</t>

          <t>Switching a subset of all received RTP streams or sub-streams to
          each receiving participant, where the used subset is typically
          specific to each receiving participant. The main advantages of this
          approach are that it is computationally cheap to the RTP Mixer and
          it has very limited impact on media QoE. The main disadvantage is
          that it can be difficult to combine a subset of received RTP streams
          into a perfect fit to the resource situation of a receiving
          participant.</t>
        </list></t>

      <t>The use of simulcast relates to the latter approach, where it is more
      important to reduce the load on the RTP Mixer and/or minimize QoE impact
      than to achieve an optimal adaptation of resource usage.</t>

      <t>A multicast/broadcast case where the receivers themselves selects the
      most appropriate simulcast stream and tune in to the right media
      transport to receive that stream is also <xref
      target="sec-multicast">considered</xref> . This enables large,
      heterogeneous receiver populations, when it comes to capabilities and
      the use of network path bandwidth resources.</t>

      <section anchor="sec-diverse-receivers"
               title="Reaching a Diverse Set of Receivers">
        <t>The media sources provided by a sending participant potentially
        need to reach several receiving participants that differ in terms of
        available resources. The receiver resources that typically differ
        include, but are not limited to:<list style="hanging">
            <t hangText="Codec:">This includes codec type (such as SDP MIME
            type) and can include codec configuration options (e.g. SDP fmtp
            parameters). A couple of codec resources that differ only in codec
            configuration will be "different" if they are somehow not
            "compatible", like if they differ in video codec profile, or the
            transport packetization configuration.</t>

            <t hangText="Sampling:">This relates to how the media source is
            sampled, in spatial as well as in temporal domain. For video
            streams, spatial sampling affects image resolution and temporal
            sampling affects video frame rate. For audio, spatial sampling
            relates to the number of audio channels and temporal sampling
            affects audio bandwidth. This may be used to suit different
            rendering capabilities or needs at the receiving endpoints, as
            well as a method to achieve different transport capabilities,
            bitrates and eventually QoE by controlling the amount of source
            data.</t>

            <t hangText="Bitrate:">This relates to the amount of bits spent
            per second to transmit the media source as an RTP stream, which
            typically also affects the Quality of Experience (QoE) for the
            receiving user.</t>
          </list>Letting the sending participant create a simulcast of a few
        differently configured RTP streams per media source can be a good
        tradeoff when using an RTP switch as middlebox, instead of sending a
        single RTP stream and using an RTP mixer to create individual
        transcodings to each receiving participant.</t>

        <t>This requires that the receiving participants can be categorized in
        terms of available resources and that the sending participant can
        choose a matching configuration for a single RTP stream per category
        and media source.</t>

        <t>For example, assume for simplicity a set of receiving participants
        that differ only in that some have support to receive Codec A, and the
        others have support to receive Codec B. Further assume that the
        sending participant can send both Codec A and B. It can then reach all
        receivers by creating two simulcasted RTP streams from each media
        source; one for Codec A and one for Codec B.</t>

        <t>In another simple example, a set of receiving participants differ
        only in screen resolution; some are able to display video with at most
        360p resolution and some support 720p resolution. A sending
        participant can then reach all receivers by creating a simulcast of
        RTP streams with 360p and 720p resolution for each sent video media
        source.</t>

        <t>In more elaborate cases, the receiving participants differ both in
        available sampling and bitrate, and maybe also codec, and it is up to
        the RTP switch to find a good trade-off in which simulcasted stream to
        choose for each intended receiver. It is also the responsibility of
        the RTP switch to negotiate a good fit of simulcast streams with the
        sending participant.</t>

        <t>The maximum number of simulcasted RTP streams that can be sent is
        mainly limited by the amount of processing and uplink network
        resources available to the sending participant.</t>
      </section>

      <section anchor="sec-application-specific"
               title="Application Specific Media Source Handling">
        <t>The application logic that controls the communication session may
        include special handling of some media sources. It is for example
        commonly the case that the media from a sending participant is not
        sent back to itself.</t>

        <t>It is also common that a currently active speaker participant is
        shown in larger size or higher quality than other participants (the
        sampling or bitrate aspects of <xref
        target="sec-diverse-receivers"/>). Not sending the active speaker
        media back to itself means there is some other participant's media
        that instead has to receive special handling towards the active
        speaker; typically the previous active speaker. This way, the
        previously active speaker is needed both in larger size (to current
        active speaker) and in small size (to the rest of the participants),
        which can be solved with a simulcast from the previously active
        speaker to the RTP switch.</t>
      </section>

      <section anchor="sec-multicast"
               title="Receiver Adaptation in Multicast/Broadcast">
        <t>When using broadcast or multicast technology to distribute
        real-time media streams to large populations of receivers, there can
        still be significant heterogeneity among the receiver population. This
        can depend on several factors:<list style="hanging">
            <t hangText="Network Bandwidth:">The network paths to individual
            receivers will have variations in the bandwidth, thus putting
            different limits on the supported bit-rates that can be
            received.</t>

            <t hangText="Endpoint Capabilities:">The end point's hardware and
            software can have varying capabilities in relation to screen
            resolution, decoding capabilities, and supported media codecs.</t>
          </list></t>

        <t>To handle these variations, a transmitter of real-time media may
        want to apply simulcast to a media source and provide it as a set of
        different encoded streams, enabling the receivers to select the best
        fit from this set themselves. The end point capabilities will usually
        result in a single initial choice. However, the network bandwidth can
        vary over time, which requires a client to continuously monitor its
        reception to determine if the received RTP streams still fit within
        the available bandwidth. If not, another set of encoded streams from
        the ones offered in the simulcast will have to be chosen.</t>

        <t>When using IP multicast, the level of granularity that the receiver
        can select from is decided by its ability to choose different
        multicast addresses. Thus, different simulcast streams need to be put
        on different media transports using different multicast addresses. If
        these simulcast streams are described using SDP, they need to be part
        of different SDP media descriptions, as SDP binds to transport on
        media description level.</t>
      </section>

      <section anchor="sec-receiver-preferences"
               title="Receiver Media Source Preferences">
        <t>The application logic that controls the communication session may
        allow receiving participants to apply preferences to the
        characteristics of the RTP stream they receive, for example in terms
        of the aspects listed in <xref target="sec-diverse-receivers"/>.
        Sending a simulcast of RTP streams is one way of accommodating
        receivers with conflicting or otherwise incompatible preferences.</t>
      </section>
    </section>

    <section anchor="sec-requirements" title="Requirements">
      <t>The following requirements need to be met to support the use cases in
      previous sections:<list style="hanging">
          <t anchor="req-1" hangText="REQ-1:">Identification. It must be
          possible to identify a set of simulcasted RTP streams as originating
          from the same media source:<list style="hanging">
              <t anchor="req-1.1" hangText="REQ-1.1:">In SDP signaling.</t>

              <t anchor="req-1.2" hangText="REQ-1.2:">On RTP/RTCP level.</t>
            </list></t>

          <t anchor="req-2" hangText="REQ-2:">Transport usage. The solution
          must work when using:<list style="hanging">
              <t anchor="req-2.1" hangText="REQ-2.1:">Legacy SDP with separate
              media transports per SDP media description.</t>

              <t anchor="req-2.2" hangText="REQ-2.2:"><xref
              target="I-D.ietf-mmusic-sdp-bundle-negotiation">Bundled</xref>
              SDP media descriptions.</t>
            </list></t>

          <t anchor="req-3" hangText="REQ-3:">Capability negotiation. It must
          be possible that:<list style="hanging">
              <t anchor="req-3.1" hangText="REQ-3.1:">Sender can express
              capability of sending simulcast.</t>

              <t anchor="req-3.2" hangText="REQ-3.2:">Receiver can express
              capability of receiving simulcast.</t>

              <t anchor="req-3.3" hangText="REQ-3.3:">Sender can express
              maximum number of simulcast streams that can be provided.</t>

              <t anchor="req-3.4" hangText="REQ-3.4:">Receiver can express
              maximum number of simulcast streams that can be received.</t>

              <t anchor="req-3.5" hangText="REQ-3.5:">Sender can detail the
              characteristics of the simulcast streams that can be
              provided.</t>

              <t anchor="req-3.6" hangText="REQ-3.6:">Receiver can detail the
              characteristics of the simulcast streams that it prefers to
              receive.</t>
            </list></t>

          <t anchor="req-4" hangText="REQ-4:">Distinguishing features. It must
          be possible to have different simulcast streams use different codec
          parameters, as can be expressed by SDP format values and RTP payload
          types.</t>

          <t anchor="req-5" hangText="REQ-5:">Compatibility. It must be
          possible to use simulcast in combination with other RTP mechanisms
          that generate additional RTP streams:<list style="hanging">
              <t anchor="req-5.1" hangText="REQ-5.1:"><xref
              target="RFC4588">RTP Retransmission</xref>.</t>

              <t anchor="req-5.2" hangText="REQ-5.2:"><xref
              target="RFC5109">RTP Forward Error Correction</xref>.</t>

              <t anchor="req-5.3" hangText="REQ-5.3:">Related payload types
              such as audio Comfort Noise and/or DTMF.</t>
            </list></t>

          <t anchor="req-6" hangText="REQ-6:">Interoperability. The solution
          must be possible to use in:<list style="hanging">
              <t anchor="req-6.1" hangText="REQ-6.1:">Interworking with
              non-simulcast legacy clients using a single media source per
              media type.</t>

              <t anchor="req-6.2" hangText="REQ-6.2:">WebRTC "Unified Plan"
              environment with a single media source per SDP media
              description.</t>
            </list></t>
        </list></t>
    </section>

    <section anchor="sec-solution-overview" title="Overview">
      <t>As an overview, the above requirements are met by signaling simulcast
      capability and configurations in <xref target="RFC4566">SDP</xref>:<list
          style="symbols">
          <t>An offer or answer can contain a number of simulcast streams,
          separate for send and receive directions.</t>

          <t>An offer or answer can contain multiple, alternative simulcast
          streams in the same fashion as multiple, alternative codecs can be
          offered in a media description.</t>

          <t>A single media source per SDP media description is assumed, which
          makes the solution work in an <xref
          target="I-D.roach-mmusic-unified-plan">Unified Plan</xref> context
          (although different from what is currently defined there), both with
          and without <xref
          target="I-D.ietf-mmusic-sdp-bundle-negotiation">BUNDLE</xref>
          grouping. This is also aligned with the concepts defined in <xref
          target="I-D.ietf-avtext-rtp-grouping-taxonomy"/>.</t>

          <!--BoB: This needs to be cleaned up, since unified plan will likely never become anything more than a draft.-->

          <t>The codec configuration for each simulcast stream is expressed in
          terms of existing SDP formats (and typically RTP payload types).
          Some codecs may rely on codec configuration based on general
          attributes that apply for all formats within a media description,
          and which could thus not be used to separate different simulcast
          streams. When many different media formats and/or simulcast streams
          are used in the SDP, the available RTP payload type number space may
          not be sufficient. This can be particularly prominent when BUNDLE is
          used. To mitigate those limitations, this memo also allows optional
          use of a separately specified <xref
          target="I-D.pthatcher-mmusic-rid">RTP-level identification
          mechanism</xref>, which complements and effectively extends the
          available simulcast stream identification number space. This also
          specifies a number of codec agnostic constraint attributes that may
          be used to define simulcast streams.</t>

          <t>It is possible, but not required to use <xref
          target="RFC5576">source-specific signaling</xref> with the proposed
          solution.</t>
        </list></t>
    </section>

    <section anchor="sec-solution" title="Detailed Description">
      <t>This section further details the overview <xref
      target="sec-solution-overview">above</xref>.</t>

      <section anchor="sec-cap" title="Simulcast Capability">
        <t>Simulcast capability is expressed as a new media level SDP
        attribute, "a=simulcast". For each desired direction
        (send/recv/sendrecv), the simulcast attribute defines a list of
        simulcast streams (separated by semicolons), each of which is a list
        of simulcast formats (separated by commas). The meaning of the
        attribute on SDP session level is undefined and MUST NOT be used.
        There MUST NOT be more than one "a=simulcast" attribute per media
        description. The <xref target="RFC5234">ABNF</xref> for this attribute
        is:</t>

        <figure align="center" anchor="fig-abnf" title="ABNF for Simulcast">
          <artwork align="left"><![CDATA[
sc-attr     = "a=simulcast:" 1*3( WSP sc-dir-list )
sc-dir-list = sc-dir WSP sc-id-type "=" sc-alt-list *( ";" sc-alt-list )
sc-dir      = "send" / "recv" / "sendrecv"
sc-id-type  = "pt" / "rid" / token
sc-alt-list = sc-id *( "," sc-id )
sc-id       = fmt / rid-value / token
; WSP defined in [RFC5234]
; fmt, token defined in [RFC4566]
; rid-value defined in [I-D.pthatcher-mmusic-rid]

]]></artwork>
        </figure>

        <t/>

        <t>There are separate and independent sets of parameters for simulcast
        in send and receive directions. When listing multiple directions, each
        direction MUST NOT occur more than once on the same line.</t>

        <t>Two simulcast stream identification methods are defined; "pt" using
        RTP payload type (SDP format), and "rid" using an additional <xref
        target="I-D.pthatcher-mmusic-rid">RTP-level identification
        mechanism</xref>.</t>

        <t>Attribute parameters are grouped by direction and consist of a
        listing of simulcast stream identifications to be used. The number of
        (non-alternative, see below) identifications in the list sets a limit
        to the number of supported simulcast streams in that direction.
        Simulcast stream identifications present in "sendrecv" direction MUST
        NOT be present also in "send" or "recv" directions, since the meaning
        of that would be ambiguous. The order of the listed simulcast streams
        in the "send" direction is not significant. The order of the listed
        simulcast streams in the "recv" direction expresses a preference which
        simulcast streams that are preferred, with the leftmost being most
        preferred. This can be of importance if the number of actually sent
        simulcast streams have to be reduced for some reason.</t>

        <t><list style="empty">
            <t>Editor's note: Consider to remove the sendrecv definitions, as
            they don't match PTs and RIDs unidirectionality.</t>
          </list></t>

        <t>Formats that have explicit <xref
        target="RFC5583">dependencies</xref> <xref
        target="I-D.pthatcher-mmusic-rid"/> to other formats (even in the same
        media description) MAY be listed as different simulcast streams.</t>

        <t>Alternative simulcast formats MAY be specified as part of the
        attribute parameters by expressing each simulcast stream as a
        comma-separated list of alternative format identifiers. In this case,
        there MUST NOT be any capability restriction in what alternatives can
        be used across different simulcast streams, like requiring all
        simulcast streams to use the same codec alternative. The order of the
        alternatives within a simulcast stream is significant; the
        alternatives are listed from (left) most preferred to (right) least
        preferred. For the use of simulcast, this overrides the normal codec
        preference as expressed by format type ordering on the m-line, using
        regular SDP rules. This is to enable a separation of general codec
        preferences and simulcast stream codec preferences.</t>

        <t>A simulcast stream can use a codec defined such that the same RTP
        SSRC can change RTP payload type multiple times during a session,
        possibly even on a per-packet basis. A typical example can be a speech
        codec that makes use of <xref target="RFC3389">Comfort Noise</xref>
        and/or <xref target="RFC4733">DTMF</xref> formats. In those cases,
        such "related" formats MUST NOT be listed explicitly in the attribute
        parameters, since they are not strictly simulcast streams of the media
        source, but rather a specific way of generating the RTP stream of a
        single simulcast stream with varying RTP payload type. Instead, only a
        single simulcast stream identification MUST be used per simulcast
        stream or alternative simulcast format (if there are such) in the SDP.
        The used simulcast stream identification SHOULD be the codec format
        most relevant to the media description, if possible to identify, for
        example the audio codec rather than the DTMF. What codec format to
        choose in the case of switching between multiple equally "important"
        formats is left open, but it is assumed that in the presence of such
        strong relation it does not matter which is chosen.</t>

        <t>Use of the <xref target="RFC2198">redundant audio data</xref>
        format could be seen as a form of simulcast for loss protection
        purposes, but is not considered conflicting with the mechanisms
        described in this memo and MAY therefore be used as any other format.
        In this case the "red" format, rather than the carried formats, SHOULD
        be the one to list as a simulcast stream on the "a=simulcast"
        line.</t>

        <t><list style="empty">
            <t>Editor's note: Consider adding the possibility to put an RTP
            stream in <xref target="I-D.ietf-avtext-rtp-stream-pause">"paused"
            state</xref> from the beginning of the session, possibly starting
            it at a later point in time by applying RTP/RTCP level procedures
            from that specification.</t>
          </list></t>

        <section anchor="sec-declarative" title="Declarative Use">
          <t>When used as a declarative media description, a=simulcast "recv"
          direction formats indicates the configured end point's required
          capability to recognize and receive a specified set of RTP streams
          as simulcast streams. In the same fashion, a=simulcast "send"
          direction requests the end point to send a specified set of RTP
          streams as simulcast streams. The "sendrecv" direction combines
          "send" and "recv" requirements, using the same format values for
          both.</t>

          <t>If multiple simulcast formats are listed, it means that the
          configured end point MUST be prepared to receive any of the "recv"
          formats, and MAY send any of the "send" formats for that simulcast
          stream.</t>

          <t><list style="empty">
              <t>Editor's note: The external RTP identification mechanism
              currently lacks a declarative use definition. As declarative use
              may also not follow unified plan with a single media source per
              m= line, it is uncertain if declarative can be defined for the
              mechanism in its current shape.</t>
            </list></t>
        </section>

        <section anchor="sec-offer-answer" title="Offer/Answer Use">
          <t>An offerer wanting to use simulcast SHALL include the
          "a=simulcast" attribute in the offer. An offerer that receives an
          answer without "a=simulcast" MUST NOT use simulcast towards the
          answerer. An offerer that receives an answer with "a=simulcast" not
          listing a direction or without any simulcast stream identifications
          in a specified direction MUST NOT use simulcast in that
          direction.</t>

          <t>An answerer that does not understand the concept of simulcast
          will also not know the attribute and will remove it in the SDP
          answer, as defined in existing <xref target="RFC3264">SDP
          Offer/Answer</xref> procedures. An answerer that does understand the
          attribute and that wants to support simulcast in an indicated
          direction SHALL reverse directionality of the unidirectional
          direction parameters; "send" becomes "recv" and vice versa, and
          include it in the answer. If the offered direction is "sendrecv",
          the answerer MAY keep it, but MAY also change it to "send" or "recv"
          to indicate that it is only interested in simulcast for a single
          direction. Note that, like all other use of SDP format tags ("pt:")
          for the send direction in Offer/Answer, format tags related to the
          simulcast stream identification send direction in an offer ("send"
          or "sendrecv") are placeholders that refer to information in the
          offer SDP, and the actual formats that will be used on the wire
          (including RTP Payload Format numbers) depends on information
          included in the SDP answer.</t>

          <t>An offerer listing a set of receive simulcast streams and/or
          alternative formats in the offer MUST be prepared to receive RTP
          streams for any of those simulcast streams and/or alternative
          formats from the answerer.</t>

          <t>An answerer that receives an offer with simulcast containing an
          "a=simulcast" attribute listing alternative formats for simulcast
          streams MAY keep all the alternatives in the answer, but it MAY also
          choose to remove any non-desirable alternatives per simulcast stream
          in the answer. The answerer MUST NOT add any alternatives that were
          not present in the offer.</t>

          <t>An answerer that receives an offer with simulcast that lists a
          number of simulcast streams, MAY reduce the number of simulcast
          streams in the answer, but MUST NOT add simulcast streams.</t>

          <t>An offerer that receives an answer where some simulcast formats
          are kept MUST be prepared to receive any of the kept send direction
          alternatives, and MAY send any of the kept receive direction
          alternatives from the answer. Similarly, the answerer MUST be
          prepared to receive any of the kept receive direction alternatives,
          and MAY send any of the kept send direction alternatives in the
          answer.</t>

          <t>The offerer and answerer MUST NOT send more than a single
          alternative format at a time (based on RTP timestamps) per simulcast
          stream, but MAY change format on a per-RTP packet basis. This
          corresponds to the existing (non-simulcast) SDP offer/answer case
          when multiple formats are included on the m-line in the SDP
          answer.</t>

          <t>An offerer that receives an answer where some of the simulcast
          streams are removed MAY release the corresponding resources (codec,
          transport, etc) in its receive direction and MUST NOT send any RTP
          streams corresponding to the removed simulcast streams.</t>

          <t>Simulcast streams or formats using undefined simulcast stream
          identifications MUST NOT be used as valid simulcast streams by an
          RTP stream receiver.</t>

          <t>The media formats and corresponding characteristics of encoded
          streams used in a simulcast SHOULD be chosen such that they are
          different. If this difference is not required, <xref
          target="RFC7104">RTP duplication</xref> procedures SHOULD be
          considered instead of simulcast.</t>

          <t><list style="empty">
              <t>Note: The inclusion of "a=simulcast" or the use of simulcast
              does not change any of the interpretation or Offer/Answer
              procedures for other SDP attributes, like "a=fmtp" or
              "a=rid".</t>
            </list></t>
        </section>
      </section>

      <section anchor="sec-relating" title="Relating Simulcast Streams">
        <t>As long as there is only a single media source per SDP media
        description, simulcast RTP streams can be related on RTP level through
        the RTP payload type and (optionally) <xref
        target="I-D.pthatcher-mmusic-rid">RID</xref>, as specified in the SDP
        <xref target="sec-cap">"a=simulcast" attribute </xref> parameters.
        When using <xref
        target="I-D.ietf-mmusic-sdp-bundle-negotiation">BUNDLE</xref> with
        multiple SDP media descriptions to specify a single RTP session, there
        is an identification mechanism that allows relating RTP streams back
        to individual media descriptions, after which the above RTP payload
        type and RID relations can be used.</t>

        <t>BUNDLE's MID is an RTCP source description (SDES) item. To ensure
        rapid initial reception, required to correctly process the RTP
        streams, it is also defined as an <xref target="RFC5285">RTP header
        extension</xref>.<list style="empty">
            <t>Editor's note: Consider making RID an SDES item too, for the
            same reasons as MID.</t>
          </list></t>
      </section>

      <section anchor="sec-ex" title="Signaling Examples">
        <t>These examples describe a client to video conference service, using
        a centralized media topology with an RTP mixer.</t>

        <figure align="center" anchor="fig-mixer-four-party"
                title="Four-party Mixer-based Conference">
          <artwork align="center"><![CDATA[
+---+      +-----------+      +---+
| A |<---->|           |<---->| B |
+---+      |           |      +---+
           |   Mixer   |
+---+      |           |      +---+
| F |<---->|           |<---->| J |
+---+      +-----------+      +---+]]></artwork>
        </figure>

        <section anchor="sec-ex-unified-plan" title="Unified Plan Client">
          <t>Alice is calling in to the mixer with a simulcast-enabled Unified
          Plan client capable of a single media source per media type. The
          client can send a simulcast of 2 video resolutions and frame rates:
          HD 1280x720p 30fps and thumbnail 320x180p 15fps. This is defined
          below using the <xref target="RFC6236">"imageattr"</xref>. Media
          formats (RTP payload types) are used as simulcast stream
          identification. Alice's Offer:</t>

          <figure align="center" anchor="fig-up-offer"
                  title="Unified Plan Simulcast Offer">
            <artwork align="left"><![CDATA[
v=0
o=alice 2362969037 2362969040 IN IP4 192.0.2.156
s=Simulcast Enabled Unified Plan Client
t=0 0
c=IN IP4 192.0.2.156
m=audio 49200 RTP/AVP 0
a=rtpmap:0 PCMU/8000
m=video 49300 RTP/AVP 97 98
a=rtpmap:97 H264/90000
a=rtpmap:98 H264/90000
a=fmtp:97 profile-level-id=42c01f; max-fs=3600; max-mbps=108000
a=fmtp:98 profile-level-id=42c00b; max-fs=240; max-mbps=3600
a=imageattr:97 send [x=1280,y=720] recv [x=1280,y=720]
a=imageattr:98 send [x=320,y=180] recv [x=320,y=180]
a=simulcast: send pt=97;98 recv pt=97

]]></artwork>
          </figure>

          <t>The only thing in the SDP that indicates simulcast capability is
          the line in the video media description containing the "simulcast"
          attribute. The included format parameters indicates that sent
          simulcast streams can differ in video resolution.</t>

          <t>The Answer from the server indicates that it too is simulcast
          capable. Should it not have been simulcast capable, the
          "a=simulcast" line would not have been present and communication
          would have started with the media negotiated in the SDP.</t>

          <figure align="center" anchor="fig-up-answer"
                  title="Unified Plan Simulcast Answer">
            <artwork align="left"><![CDATA[
v=0
o=server 823479283 1209384938 IN IP4 192.0.2.2
s=Answer to Simulcast Enabled Unified Plan Client
t=0 0
c=IN IP4 192.0.2.43
m=audio 49672 RTP/AVP 0
a=rtpmap:0 PCMU/8000
m=video 49674 RTP/AVP 97 98
a=rtpmap:97 H264/90000
a=rtpmap:98 H264/90000
a=fmtp:97 profile-level-id=42c01f; max-fs=3600; max-mbps=108000
a=fmtp:98 profile-level-id=42c00b; max-fs=240; max-mbps=3600
a=imageattr:97 send [x=1280,y=720] recv [x=1280,y=720]
a=imageattr:98 send [x=320,y=180] recv [x=320,y=180]
a=simulcast: recv pt=97;98 send pt=97

]]></artwork>
          </figure>

          <t>Since the server is the simulcast media receiver, it reverses the
          direction of the "simulcast" attribute parameters.</t>
        </section>

        <section anchor="sec-ex-multi-source" title="Multi-Source Client">
          <t>Fred is calling in to the same conference as in the example above
          with a two-camera, two-display system, thus capable of handling two
          separate media sources in each direction, where each media source is
          simulcast-enabled in the send direction. Fred's client is a Unified
          Plan client, restricted to a single media source per media
          description.</t>

          <t>The first two simulcast streams for the first media source use
          different codecs, <xref target="RFC6190">H264-SVC</xref> and <xref
          target="RFC6184">H264</xref>. These two simulcast streams also have
          a temporal dependency. Two different video codecs, <xref
          target="I-D.ietf-payload-vp8">VP8</xref> and H264, are offered as
          alternatives for the third simulcast stream for the first media
          source. RID is used as simulcast stream identification, reducing the
          number of media formats needed.</t>

          <t>The second media source is offered with three different simulcast
          streams. All video streams of this second media source are loss
          protected by <xref target="RFC4588">RTP retransmission</xref>. RID
          is used as simulcast stream identification.</t>

          <t>Fred's client is also using BUNDLE to send all RTP streams from
          all media descriptions in the same RTP session on a single media
          transport. Although using many different simulcast streams in this
          example, use of RID as simulcast stream identification enables use
          of a low number of RTP payload types. Note that the use of both
          BUNDLE and RID recommends using the <xref target="RFC5285">RTP
          header extension</xref> for carrying these fields.</t>

          <figure anchor="fig-ms-offer"
                  title="Fred's Multi-Source Simulcast Offer">
            <artwork><![CDATA[
v=0
o=fred 238947129 823479223 IN IP4 192.0.2.125
s=Offer from Simulcast Enabled Multi-Source Client
t=0 0
c=IN IP4 192.0.2.125
a=group:BUNDLE foo bar zen

m=audio 49200 RTP/AVP 99
a=mid:foo
a=rtpmap:99 G722/8000

m=video 49600 RTP/AVP 100 101 103
a=mid:bar
a=rtpmap:100 H264-SVC/90000
a=rtpmap:101 H264/90000
a=rtpmap:103 VP8/90000
a=fmtp:100 profile-level-id=42400d; max-fs=3600; max-mbps=108000; \
    mst-mode=NI-TC
a=fmtp:101 profile-level-id=42c00d; max-fs=3600; max-mbps=54000
a=fmtp:103 max-fs=900; max-fr=30
a=rid:1 send pt=100 max-width=1280;max-height=720;max-fr=60;depend=2
a=rid:2 send pt=101 max-width=1280;max-height=720;max-fr=30
a=rid:3 send pt=101 max-width=640;max-height=360
a=rid:4 send pt=103 max-width=640;max-height=360
a=depend:100 lay bar:101
a=extmap:1 urn:ietf:params:rtp-hdrext:sdes:mid
a=extmap:2 urn:ietf:params:rtp-hdrext:rid
a=simulcast: send rid=1;2;4,3

m=video 49602 RTP/AVP 96 104
a=mid:zen
a=rtpmap:96 VP8/90000
a=fmtp:96 max-fs=3600; max-fr=30
a=rtpmap:104 rtx/90000
a=fmtp:104 apt=96;rtx-time=200
a=rid:5 send pt=96 max-fs=921600;max-fr=30
a=rid:6 send pt=96 max-fs=614400;max-fr=15
a=rid:7 send pt=96 max-fs=230400;max-fr=30
a=extmap:1 urn:ietf:params:rtp-hdrext:sdes:mid
a=extmap:2 urn:ietf:params:rtp-hdrext:rid
a=simulcast: send rid=6;5;7

]]></artwork>
          </figure>

          <t><list style="empty">
              <t>Note: Empty lines in the SDP above are added only for
              readability and would not be present in an actual SDP.</t>
            </list></t>
        </section>
      </section>
    </section>

    <section anchor="sec-network-aspects" title="Network Aspects">
      <t>Simulcast is in this memo defined as the act of sending multiple
      alternative encoded streams of the same underlying media source. When
      transmitting multiple independent streams that originate from the same
      source, it could potentially be done in several different ways using
      RTP. A general discussion on considerations for use of the different RTP
      multiplexing alternatives can be found in <xref
      target="I-D.ietf-avtcore-multiplex-guidelines">Guidelines for
      Multiplexing in RTP</xref>. Discussion and clarification on how to
      handle multiple streams in an RTP session can be found in <xref
      target="I-D.ietf-avtcore-rtp-multi-stream"/>.</t>

      <t>The network aspects that are relevant for simulcast are:<list
          style="hanging">
          <t hangText="Quality of Service:">When using simulcast it might be
          of interest to prioritize a particular simulcast stream, rather than
          applying equal treatment to all streams. For example, lower bit-rate
          streams may be prioritized over higher bit-rate streams to minimize
          congestion or packet losses in the low bit-rate streams. Thus, there
          is a benefit to use a simulcast solution that supports QoS as good
          as possible. By separating simulcast streams into different RTP
          sessions and send those RTP sessions over different media
          transports, a simulcast stream can be prioritized by existing flow
          based QoS mechanisms. When using unicast, QoS mechanisms based on
          individual packet marking are also feasible, which do not require
          separation of simulcast streams into different RTP sessions to apply
          different QoS. The proposed solution can be extended to support this
          functionality with an optional mid: prefix before the RTP payload
          types of a simulcast stream, to describe simulcast across multiple
          media descriptions.<list style="hanging">
              <t hangText="Editor's note:">With the chosen approach, it is not
              possible to use different simulcast streams on different
              transports, so either that description should be removed, or the
              solution has to be amended to cater also for that case.</t>
            </list></t>

          <t hangText="NAT/FW Traversal:">Using multiple RTP sessions will
          incur more cost for NAT/FW traversal unless they can re-use the same
          transport flow, which can be achieved by either one of <xref
          target="I-D.westerlund-avtcore-transport-multiplexing">multiplexing
          multiple RTP sessions on a single lower layer transport</xref> or
          <xref target="I-D.ietf-mmusic-sdp-bundle-negotiation">Multiplexing
          Negotiation Using SDP Port Numbers</xref>. If flow based QoS with
          any differentiation is desirable, the cost for additional transport
          flows is likely necessary.</t>

          <t hangText="Multicast:">Multiple RTP sessions will be required to
          enable combining simulcast with multicast. Different simulcast
          streams have to be separated to different multicast groups to allow
          a multicast receiver to pick the stream it wants, rather than
          receive all of them. In this case, the only reasonable
          implementation is to use different RTP sessions for each multicast
          group so that reporting and other RTCP functions operate as
          intended. The proposed solution can be extended to support this
          functionality with an optional mid: prefix before the RTP payload
          types of a simulcast stream, to describe simulcast across multiple
          media descriptions.<list style="hanging">
              <t hangText="Editor's note:">As with QoS above, different
              simulcast streams on different multicast groups are not possible
              with the chosen approach, and text must be changed
              accordingly.</t>
            </list></t>
        </list></t>

      <t/>
    </section>

    <section anchor="sec-iana" title="IANA Considerations">
      <t>This document requests to register a new SDP attribute,
      simulcast.</t>

      <t>Formal registrations to be written.</t>
    </section>

    <section anchor="sec-security" title="Security Considerations">
      <t>The simulcast capability, configuration attributes and parameters are
      vulnerable to attacks in signaling.</t>

      <t>A false inclusion of the "a=simulcast" attribute may result in
      simultaneous transmission of multiple RTP streams that would otherwise
      not be generated. The impact is limited by the media description joint
      bandwidth, shared by all simulcast streams irrespective of their number.
      There may however be a large number of unwanted RTP streams that will
      impact the share of bandwidth allocated for the originally wanted RTP
      stream.</t>

      <t>A hostile removal of the "a=simulcast" attribute will result in
      simulcast not being used.</t>

      <t>Neither of the above will likely have any major consequences and can
      be mitigated by signaling that is at least integrity and source
      authenticated to prevent an attacker to change it.</t>
    </section>

    <section title="Contributors">
      <t>Morgan Lindqvist and Fredrik Jansson, both from Ericsson, have
      contributed with important material to the first versions of this
      document. Robert Hansen and Cullen Jennings, from Cisco, and Peter
      Thatcher, from Google, contributed significantly to subsequent
      versions.</t>
    </section>

    <section anchor="sec-ack" title="Acknowledgements">
      <t/>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>

      <?rfc include='reference.RFC.3550'?>

      <?rfc include='reference.RFC.4566'?>

      <?rfc include='reference.RFC.5109'?>

      <?rfc include='reference.RFC.5234'?>

      <?rfc include='reference.RFC.7104'?>

      <?rfc include='reference.I-D.pthatcher-mmusic-rid'?>
    </references>

    <references title="Informative References">
      <?rfc include='reference.RFC.2198'?>

      <?rfc include='reference.RFC.3264'?>

      <?rfc include='reference.RFC.3389'?>

      <?rfc include='reference.RFC.4588'?>

      <?rfc include='reference.RFC.4733'?>

      <?rfc include='reference.RFC.5117'?>

      <?rfc include='reference.RFC.5285'?>

      <?rfc include='reference.RFC.5576'?>

      <?rfc include='reference.RFC.5583'?>

      <?rfc include='reference.RFC.6184'?>

      <?rfc include='reference.RFC.6190'?>

      <?rfc include='reference.RFC.6236'?>

      <?rfc include='reference.I-D.ietf-avtcore-multiplex-guidelines'?>

      <?rfc include='reference.I-D.ietf-avtcore-rtp-multi-stream'?>

      <?rfc include='reference.I-D.westerlund-avtcore-transport-multiplexing'?>

      <?rfc include='reference.I-D.ietf-avtcore-rtp-topologies-update'?>

      <?rfc include='reference.I-D.ietf-mmusic-sdp-bundle-negotiation'?>

      <?rfc include='reference.I-D.ietf-avtext-rtp-grouping-taxonomy'?>

      <?rfc include='reference.I-D.roach-mmusic-unified-plan'?>

      <?rfc include='reference.I-D.ietf-avtext-rtp-stream-pause'?>

      <?rfc include='reference.I-D.ietf-payload-vp8'?>
    </references>

    <section title="Changes From Earlier Versions">
      <t>NOTE TO RFC EDITOR: Please remove this section prior to
      publication.</t>

      <section title="Modifications Between WG Version -01 and  -02">
        <t><list style="symbols">
            <t>Relying on the new RID solution for codec constraints and
            configuration identification. This has resulted in changes in
            syntax to identify if pt or RID is used to describe the simulcast
            stream.</t>

            <t>Renamed simulcast version and simulcast version alternative to
            simulcast stream and simulcast format respectively, and improved
            definitions for them.</t>

            <t>Clarification that it is possible to switch between simulcast
            version alternatives, but that only a single one be used at any
            point in time.</t>

            <t>Changed the definition so that ordering of simulcast formats
            for a specific simulcast stream do have a preference order.</t>
          </list></t>
      </section>

      <section title="Modifications Between WG Version -00 and  -01">
        <t><list style="symbols">
            <t>No changes. Only preventing expiry.</t>
          </list></t>
      </section>

      <section title="Modifications Between Individual Version -00 and WG Version -00">
        <t><list style="symbols">
            <t>Added this appendix.</t>
          </list></t>
      </section>
    </section>
  </back>
</rfc>
